package competition.single.week346;

import java.util.*;

/**
 * 2023/5/21
 *
 * @author x.z
 */
public class Solution {

    /**
     * 6439. 删除子串后的字符串最小长度
     * 给你一个仅由 大写 英文字符组成的字符串 s 。
     *
     * 你可以对此字符串执行一些操作，在每一步操作中，你可以从 s 中删除 任一个 "AB" 或 "CD" 子字符串。
     *
     * 通过执行操作，删除所有 "AB" 和 "CD" 子串，返回可获得的最终字符串的 最小 可能长度。
     *
     * 注意，删除子串后，重新连接出的字符串可能会产生新的 "AB" 或 "CD" 子串。
     */
    public int minLength(String s) {
        final char[] chs = s.toCharArray();
        Stack<Character> stack = new Stack<>();

        for (char cur : chs) {
            if (stack.isEmpty()) {
                stack.push(cur);
            } else {
                final Character pre = stack.peek();
                if (pre == 'A') {
                    if (cur == 'B') {
                        stack.pop();
                        continue;
                    }
                } else if (pre == 'C') {
                    if (cur == 'D') {
                        stack.pop();
                        continue;
                    }
                }
                stack.push(cur);
            }
        }

        return stack.size();
    }

    /**
     * 6454. 字典序最小回文串
     * 给你一个由 小写英文字母 组成的字符串 s ，你可以对其执行一些操作。在一步操作中，你可以用其他小写英文字母 替换  s 中的一个字符。
     *
     * 请你执行 尽可能少的操作 ，使 s 变成一个 回文串 。如果执行 最少 操作次数的方案不止一种，则只需选取 字典序最小 的方案。
     *
     * 对于两个长度相同的字符串 a 和 b ，在 a 和 b 出现不同的第一个位置，如果该位置上 a 中对应字母比 b 中对应字母在字母表中出现顺序更早，则认为 a 的字典序比 b 的字典序要小。
     *
     * 返回最终的回文字符串。
     * TODO 贪心算法
     */
    public String makeSmallestPalindrome(String s) {
        final char[] chs = s.toCharArray();
        for (int i = 0; i < chs.length / 2; i++) {
            if(chs[i] != chs[chs.length - i - 1]){
                if(chs[i] < chs[chs.length - i - 1]){
                    chs[chs.length - 1 - i] = chs[i];
                }else{
                    chs[i] = chs[chs.length - 1 -i];
                }
            }
        }

        return new String(chs);
    }

    /**
     * 6441. 求一个整数的惩罚数
     * 给你一个正整数 n ，请你返回 n 的 惩罚数 。
     *
     * n 的 惩罚数 定义为所有满足以下条件 i 的数的平方和：
     *
     * 1 <= i <= n
     * i * i 的十进制表示的字符串可以分割成若干连续子字符串，且这些子字符串对应的整数值之和等于 i 。
     * TODO 没有思路
     *      抄了一个别人的，看看
     */
    public int punishmentNumber(int n) {
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            final boolean flag = punishmentNumber(0, "" + i * i, i);
            sum += flag ? i * i : 0;
        }
        return sum;
    }

    /**
     * TODO 根据参数观察，应该是一个 DFS+回归 的思路
     * @param i
     * @param s
     * @param n
     * @return
     */
    private boolean punishmentNumber(int i, String s, int n) {
        if (i == s.length()) {
            return n == 0;
        }
        for (int j = i + 1; j <= s.length(); j++) {
            if (punishmentNumber(j, s, n - Integer.parseInt(s.substring(i, j).intern()))) {
                return true;
            }
        }
        return false;
    }

    /**
     * 面向结果编程
     */
    public int punishmentNumber1(int n){
        int[] number = {1,9,10,36,45,55,82,91,99,100,235,297,369,370,379,414,657,675,703,756,792,909,918,945,964,990,991,999,1000,};
        int result = 0;
        for (int i : number) {
            if(i > n){
                break;
            }
            result += i * i;
        }
        return result;
    }

    /**
     * 6442. 修改图中的边权
     * 给你一个 n 个节点的 无向带权连通 图，节点编号为 0 到 n - 1 ，再给你一个整数数组 edges ，其中 edges[i] = [ai, bi, wi] 表示节点 ai 和 bi 之间有一条边权为 wi 的边。
     *
     * 部分边的边权为 -1（wi = -1），其他边的边权都为 正 数（wi > 0）。
     *
     * 你需要将所有边权为 -1 的边都修改为范围 [1, 2 * 109] 中的 正整数 ，使得从节点 source 到节点 destination 的 最短距离 为整数 target 。如果有 多种 修改方案可以使 source 和 destination 之间的最短距离等于 target ，你可以返回任意一种方案。
     *
     * 如果存在使 source 到 destination 最短距离为 target 的方案，请你按任意顺序返回包含所有边的数组（包括未修改边权的边）。如果不存在这样的方案，请你返回一个 空数组 。
     *
     * 注意：你不能修改一开始边权为正数的边。
     * TODO 先收集所有的负权边，并修改为最小值 1，然后开始执行路径搜索
     *      DFS 所有路径保存下来，查询最短路径是否等于 target，是则结束，直接返回原始图
     *      否，判断最短路径是否大于 target，是则返回空数组
     *      否，收集小于整体权值 target 的路径中的负权边（从最开始的负权集中比对收集），先使用公共边将所有权值提升，最后使用独有边使最短路径为 target
     *
     * TODO 可行，但是超时了
     */
    public int[][] modifiedGraphEdges(int n, int[][] edges, int source, int destination, int target) {
        long begin = System.nanoTime();
        HashMap<Integer, List<int[]>> map = new HashMap<>();
        Set<int[]> negativeEdge = new HashSet<>();
        for (int[] edge : edges) {
            final List<int[]> def1 = map.getOrDefault(edge[0], new ArrayList<>());
            def1.add(edge);
            map.putIfAbsent(edge[0], def1);

            final List<int[]> def2 = map.getOrDefault(edge[1], new ArrayList<>());
            def2.add(edge);
            map.putIfAbsent(edge[1], def2);

            if (edge[2] < 0) {
                negativeEdge.add(edge);
                edge[2] = 1;
            }
        }

        System.out.println("完成初始化，耗时：" + (System.nanoTime() - begin) / Math.pow(10, 6) + " ms");
        begin = System.nanoTime();

        Map<Set<int[]>, Integer> pathWeight = new HashMap<>();
        try{
            dfsAll(0, map, source, map.get(source), destination, target, new HashSet<>(), pathWeight, new HashSet<>(), negativeEdge);
        }catch (Exception e){
            return new int[0][0];
        }

        System.out.println("完成DFS，耗时：" + (System.nanoTime() - begin) / Math.pow(10, 6) + " ms");
        begin = System.nanoTime();

        if(pathWeight.isEmpty()){
            return new int[0][0];
        }

        int min = Integer.MAX_VALUE;
        Set<int[]> minPath = null;
        for (Map.Entry<Set<int[]>, Integer> entry : pathWeight.entrySet()) {
            final Integer value = entry.getValue();
            if(min > value){
                min = value;
                minPath = entry.getKey();
            }
        }
        if(min == target){
            return edges;
        }

        System.out.println("完成最小值筛选，耗时：" + (System.nanoTime() - begin) / Math.pow(10, 6) + " ms");
        begin = System.nanoTime();

        while(min < target){
            final int dev = target - min;
            int[] tmpEdge = null;
            for (int[] ints : minPath) {
                if(negativeEdge.contains(ints)){
                    ints[2] += dev;
                    tmpEdge = ints;
                    break;
                }
            }
            if(null == tmpEdge){
                System.out.println("完成最终计算，耗时：" + (System.nanoTime() - begin) / Math.pow(10, 6) + " ms");
                return new int[0][0];
            }
            min = Integer.MAX_VALUE;
            Map<Set<int[]>, Integer> tmpPathWeight = new HashMap<>();
            for (Map.Entry<Set<int[]>, Integer> entry : pathWeight.entrySet()) {
                final Set<int[]> key = entry.getKey();
                Integer value = entry.getValue();
                if(key.contains(tmpEdge)){
                    value += dev;
                }
                if(value <= target){
                    tmpPathWeight.put(key, value);
                }
                if(min > value){
                    min = value;
                    minPath = key;
                }
            }
            pathWeight = tmpPathWeight;
        }
        System.out.println("完成最终计算，耗时：" + (System.nanoTime() - begin) / Math.pow(10, 6) + " ms");
        return edges;
    }

    /**
     * 这个深度太高了，容易超时，重写一个DFS
     */
    private void dfsAll(int curWeight, HashMap<Integer, List<int[]>> map, int curNode, List<int[]> nextList, int destination, int target,
                        Set<int[]> path, Map<Set<int[]>, Integer> pathWeight, HashSet<Integer> visited, Set<int[]> negativeEdge) throws Exception {
        if(null == nextList || nextList.isEmpty() || curWeight > target){
            return;
        }
        visited.add(curNode);
        for (int[] anInt : nextList) {
            if (path.contains(anInt)) {
                continue;
            }

            final int next = anInt[0] == curNode ? anInt[1] : anInt[0];
            if(visited.contains(next)){
                continue;
            }
            final int nextWeight = curWeight + anInt[2];
            if(next == destination){
                if(nextWeight < target){
                    if(hasNegativeEdge(path, negativeEdge) || negativeEdge.contains(anInt)){
                        final HashSet<int[]> from = new HashSet<>(path);
                        from.add(anInt);
                        pathWeight.put(from, nextWeight);
                    }else{
                        throw new Exception("found min path, and not contains negative-edge");
                    }
                }else if(nextWeight == target){
                    final HashSet<int[]> from = new HashSet<>(path);
                    from.add(anInt);
                    pathWeight.put(from, nextWeight);
                }
                continue;
            }
            final List<int[]> tmpNextList = map.get(next);
            path.add(anInt);
            dfsAll(nextWeight, map, next, tmpNextList, destination, target, path, pathWeight, visited, negativeEdge);
            path.remove(anInt);
        }
        visited.remove(curNode);
    }

    private boolean hasNegativeEdge(Set<int[]> path, Set<int[]> negativeEdge){
        Set<int[]> min, other;
        if(path.size() > negativeEdge.size()){
            min = path;
            other = negativeEdge;
        }else{
            min = negativeEdge;
            other = path;
        }
        for (int[] edge : min) {
            if(other.contains(edge)){
                return true;
            }
        }
        return false;
    }

    /**
     * TODO 第二个思路，初始化后搜寻最短路径
     *      判断是否带有负权边，若否，则返回空数组
     *      是，修改路径上的负权边，使其权值等于 target
     *      然后在去寻找最短路径，如找到了，重复上述步骤
     *      否，返回当前数组
     *
     * TODO 关于 DFS ，采用回归算法探测
     *      开始优化时间
     *      将最短路径算法中的最小权值查询算法替换为优先队列，可将查询稳定下来，最终勉强过关
     */
    public int[][] modifiedGraphEdges2(int n, int[][] edges, int source, int destination, int target) {
//        初始化调整
        HashMap<Integer, List<int[]>> map = new HashMap<>();
        Set<int[]> negativeEdge = new HashSet<>();
        for (int[] edge : edges) {
            final List<int[]> def1 = map.getOrDefault(edge[0], new ArrayList<>());
            def1.add(edge);
            map.putIfAbsent(edge[0], def1);

            final List<int[]> def2 = map.getOrDefault(edge[1], new ArrayList<>());
            def2.add(edge);
            map.putIfAbsent(edge[1], def2);

            if (edge[2] < 0) {
                negativeEdge.add(edge);
                edge[2] = 1;
            }
        }

        int[][] weight = new int[n][2];
        for (int i = 0; i < weight.length; i++) {
            weight[i][0] = i;
            weight[i][1] = Integer.MAX_VALUE;
        }
        int[][] from = new int[n][3];
        Set<Integer> visitedNode = new HashSet<>();
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));

        int curNode;
        boolean flag = false;
        while(!flag){
//          dijkstra
            visitedNode.clear();
            pq.clear();
            for (int i = 0; i < weight.length; i++) {
                weight[i][1] = Integer.MAX_VALUE;
            }
            weight[source][1] = 0;
            curNode = source;
            pq.offer(weight[source]);
            while(visitedNode.size() < n){
                long begin = System.nanoTime();
                visitedNode.add(curNode);
                final List<int[]> ints = map.get(curNode);
                for (int[] edge : ints) {
                    int next = curNode == edge[0] ? edge[1] : edge[0];
                    if(weight[next][1] > weight[curNode][1] + edge[2]){
                        weight[next][1] = weight[curNode][1] + edge[2];
                        from[next] = edge;
                        if (pq.contains(weight[next])) {
                            pq.remove(weight[next]);
                            pq.offer(weight[next]);
                        }else{
                            pq.offer(weight[next]);
                        }
                    }
                }
//                搜寻最近的点
                while(pq.size() > 0){
                    final int[] poll = pq.poll();
                    if (! visitedNode.contains(poll[0])) {
                        curNode = poll[0];
                        break;
                    }
                }
            }

            if(weight[destination][1] == target){
                return edges;
            }
//            计算最短路径，并调整负权边
            int suf = destination;
            flag = true;
            while(suf != source){
                if(negativeEdge.contains(from[suf])){
                    from[suf][2] += target - weight[destination][1];
                    flag = false;
                    negativeEdge.remove(from[suf]);
                    break;
                }
                suf = from[suf][0] == suf ? from[suf][1] : from[suf][0];
            }
        }
        return new int[0][0];
    }

    /**
     * 别人的第四题，抄下来看看
     */
    public int[][] modifiedGraphEdges3(int n, int[][] edges, int source, int destination, int target) {
        HashMap<Integer, ArrayList<int[]>> map = new HashMap<>();
        for (int[] edge : edges) {
            map.computeIfAbsent(edge[0], t -> new ArrayList<>()).add(edge);
            map.computeIfAbsent(edge[1], t -> new ArrayList<>()).add(edge);
        }
        if (modifiedGraphEdges(n, source, destination, target, map, false) < target
                || modifiedGraphEdges(n, source, destination, target, map, true) > target) {
            return new int[0][];
        }
        for (int[] edge : edges) {
            edge[2] = edge[2] > 0 ? edge[2] : 2000000000;
        }
        return edges;
    }

    /**
     * 目前来看，应该是如下两个思路：
     *      flag-false 查找是否存在一条路径，该路径不存在负权边，且整体权值小于 target
     *      flag-true  查找是否存在一条路径，即使包含负权边，整体权值也大于 target
     * @param n
     * @param source
     * @param destination
     * @param target
     * @param map
     * @param flag
     * @return
     */
    private int modifiedGraphEdges(int n, int source, int destination, int target,
                                   HashMap<Integer, ArrayList<int[]>> map, boolean flag) {
        int[] start = { 0, source }, visited[] = new int[n][n];
        HashMap<int[], ArrayList<int[]>> edges = new HashMap<>(Map.of(start, new ArrayList<>()));
//        WTF? 什么屌东西？看不懂的优先队列
        PriorityQueue<int[]> queue = new PriorityQueue<>(
                (o, p) -> edges.get(o).size() == edges.get(p).size() ? o[0] - p[0]
                        : edges.get(o).size() - edges.get(p).size());
        for (queue.offer(start); !queue.isEmpty();) {
            int[] poll = queue.poll();
            if (poll[0] <= target) {
                if (poll[1] == destination) {
                    for (int i = 0; i < edges.get(poll).size(); i++) {
                        edges.get(poll).get(i)[2] = i > 0 ? 1 : target - poll[0] + 1;
                    }
                    return poll[0];
                } else if (visited[edges.get(poll).size()][poll[1]] == 0) {
                    visited[edges.get(poll).size()][poll[1]] = 1;
                    for (int[] edge : map.getOrDefault(poll[1], new ArrayList<>())) {
                        if (edge[2] > 0 || flag) {
                            int[] next = { poll[0] + Math.max(1, edge[2]), edge[0] == poll[1] ? edge[1] : edge[0] };
                            edges.put(next, new ArrayList<>(edges.get(poll)));
                            if (edge[2] < 0) {
                                edges.get(next).add(edge);
                            }
                            queue.offer(next);
                        }
                    }
                }
            }
        }
        return Integer.MAX_VALUE;
    }

    public static void main(String[] args) {
        final Solution test = new Solution();

//        String s = "ABFCACDB";
//        System.out.println(test.minLength(s));

        long begin = System.nanoTime();
        int n = 1000;
        System.out.println(test.punishmentNumber(n));
        System.out.println("耗时：" + (System.nanoTime() - begin) / Math.pow(10, 6) + "ms");

        begin = System.nanoTime();
        System.out.println(test.punishmentNumber1(n));
        System.out.println("耗时：" + (System.nanoTime() - begin) / Math.pow(10, 6) + "ms");


//        案例case
//        5
//        [[4,1,-1],[2,0,-1],[0,3,-1],[4,3,-1]]
//        0
//        1
//        5

//        超时 case，已优化
//        18
//        [[2,4,-1],[4,5,-1],[6,11,-1],[3,8,-1],[9,10,-1],[9,3,-1],[3,12,-1],[11,13,-1],[12,1,-1],[1,5,-1],[5,15,-1],[14,0,54],[17,0,-1],[15,13,-1],[16,7,-1],[7,13,-1],[17,13,-1],[9,8,-1],[7,3,-1],[4,3,-1],[6,10,-1],[17,9,-1],[14,9,-1],[4,6,-1],[16,10,-1],[5,16,-1],[2,7,-1],[4,11,-1],[17,2,-1],[6,12,-1],[14,4,-1],[14,3,56],[17,1,-1],[16,13,-1],[11,8,-1],[5,0,-1],[6,2,-1],[11,17,-1],[7,14,-1],[10,17,-1],[6,0,-1],[2,11,-1],[15,0,26],[5,11,83],[10,2,46],[1,14,77],[4,1,55],[12,10,24],[6,17,80],[7,15,93],[13,4,91],[6,8,44],[0,2,83],[3,1,88],[15,1,53],[1,0,56],[17,15,89],[12,5,34]]
//        0
//        3
//        111

//        错误case，已解决，并且添加异常抛出与捕获
//        4
//        [[0,1,-1],[1,2,-1],[3,1,-1],[3,0,2],[0,2,5]]
//        2
//        3
//        8

//        错误case，已解决
//        4
//        [[0,1,5],[1,2,7],[2,3,7],[3,1,9],[3,0,-1],[0,2,-1]]
//        2
//        3
//        7

//        超时case，已解决
//        20
//        [[0,15,-1],[1,11,-1],[2,17,-1],[13,4,-1],[6,18,-1],[10,7,-1],[8,15,-1],[12,3,-1],[5,3,-1],[18,5,-1],[14,18,-1],[19,16,-1],[9,17,-1],[18,10,-1],[10,9,-1],[9,13,-1],[13,11,-1],[11,15,-1],[15,19,-1],[6,1,-1],[13,17,-1],[1,17,-1],[18,9,-1],[12,17,-1],[5,6,-1],[6,4,-1],[18,1,-1],[9,14,-1],[16,4,-1],[18,2,-1],[18,3,-1],[5,17,-1],[10,13,-1],[11,6,-1],[8,16,-1],[1,12,-1],[19,9,-1],[6,17,-1],[0,12,-1],[4,1,-1],[13,14,-1],[6,16,-1],[5,9,-1],[13,8,-1],[8,10,-1],[11,10,-1],[13,12,-1],[4,12,-1],[0,4,-1],[17,10,-1],[3,7,-1],[2,5,-1],[0,18,-1],[14,8,-1],[0,10,-1],[6,19,-1],[0,13,15],[5,8,-1],[0,1,-1],[18,13,34],[3,8,99],[12,15,63],[2,10,11],[15,16,34],[14,7,57],[6,14,81],[15,9,45],[18,16,29],[13,2,42],[3,11,19],[5,11,84],[6,13,59],[6,2,36],[14,4,51],[17,16,30]]
//        0
//        2
//        58

//        for (Case4 item : genCase4()) {
//            final long begin = System.nanoTime();
//            final int[][] tmpResult = test.modifiedGraphEdges3(item.n, item.edges, item.source, item.des, item.target);
//            System.out.println((System.nanoTime() - begin) / Math.pow(10, 6) + " ms");
//            System.out.println(tmpResult.length);
////            for (int[] ints : tmpResult) {
////                System.out.println(Arrays.toString(ints));
////            }
//            System.out.println();
//        }

//        System.out.println();
//        String s = "[4,1,-1],[2,0,-1],[0,3,-1],[4,3,-1]";
//        s = s.replaceAll("\\[", "{");
//        s = s.replaceAll("]", "}");
////        s = s.replaceAll("},", "},\n");
//        System.out.println(s);
    }

    private static List<Case4> genCase4(){
        List<Case4> result = new ArrayList<>();
//        示例
//        result.add(new Case4(5, 0, 1, 5, new int[][]{
//                {4,1,-1},{2,0,-1},{0,3,-1},{4,3,-1}
//        }));

//        case 660，存在路径
        result.add(new Case4(4, 2, 3, 7, new int[][]{
                {0,1,5},
                {1,2,7},
                {2,3,7},
                {3,1,9},
                {3,0,-1},
                {0,2,-1}
        }));
////        case 745，存在路径 [[0,2,5],[2,1,5],[2,4,3],[3,4,5],[4,0,1],[0,3,7],[2,3,1000000005]]
//        result.add(new Case4(5, 0, 1, 9, new int[][]{
//                {0,2,5},
//                {2,1,-1},
//                {2,4,3},
//                {3,4,5},
//                {4,0,1},
//                {0,3,-1},
//                {2,3,-1}
//        }));
////        case 767，不存在路径
//        result.add(new Case4(9, 0, 7, 90, new int[][]{
//                {0,3,-1},
//                {6,1,-1},
//                {4,6,-1},
//                {4,2,-1},
//                {2,5,-1},
//                {5,8,-1},
//                {3,7,31},
//                {8,3,32},
//                {4,3,-1},
//                {5,3,-1},
//                {5,1,-1},
//                {1,8,-1},
//                {6,8,47},
//                {0,2,59},
//                {7,8,100},
//                {2,7,44},
//                {8,4,85},
//                {5,0,62},
//                {5,4,48},
//                {1,0,34},
//                {0,6,75},
//                {2,1,38},
//                {0,4,64},
//                {8,0,26},
//                {1,7,95},
//                {3,1,58},
//                {4,1,12},
//                {7,5,73},
//                {8,2,41}
//        }));
//        case 767，力扣是动态生成的数据，存在路径
//        result.add(new Case4(14, 0, 1, 97, new int[][]{
//                {0,12,87},
//                {9,1,-1},
//                {2,9,41},
//                {9,5,33},
//                {7,9,66},
//                {11,10,66},
//                {10,13,54},
//                {3,12,39},
//                {3,4,52},
//                {6,4,35},
//                {6,9,12},
//                {9,8,10},
//                {8,13,47},
//                {4,9,76},
//                {1,7,65},
//                {12,5,92},
//                {9,10,86},
//                {5,13,73},
//                {8,3,88},
//                {6,5,48},
//                {4,5,71},
//                {6,11,90},
//                {12,4,60},
//                {9,11,-1},
//                {12,13,83},
//                {0,13,-1},
//                {10,4,48},
//                {10,6,71},
//                {10,12,44},
//                {13,11,-1},
//                {3,1,88},
//                {13,7,33},
//                {8,7,32},
//                {13,6,63},
//                {12,9,49},
//                {0,6,78},
//                {1,6,45},
//                {7,4,63},
//                {11,12,18}
//        }));
//        到达了最后一个 case，超时了，开始优化算法时间复杂度
//        3000 多条边，不存在路径
//        String s = "6,16,-1],[7,55,-1],[11,66,-1],[12,1,-1],[18,8,-1],[88,19,-1],[88,20,-1],[22,87,-1],[77,24,-1],[58,25,-1],[27,26,-1],[76,26,-1],[31,36,-1],[32,85,-1],[37,82,-1],[79,38,-1],[65,41,-1],[42,40,-1],[9,43,-1],[9,53,-1],[45,5,-1],[47,35,-1],[35,15,-1],[49,14,-1],[2,52,-1],[57,15,-1],[69,15,-1],[44,59,-1],[70,60,-1],[34,61,-1],[63,55,-1],[55,17,-1],[91,17,-1],[44,66,-1],[56,67,-1],[68,36,-1],[36,87,-1],[71,70,-1],[72,96,-1],[73,56,-1],[4,56,-1],[74,86,-1],[76,71,-1],[71,48,-1],[33,48,-1],[16,79,-1],[5,16,-1],[0,81,125515],[80,84,-1],[21,80,-1],[21,34,-1],[29,85,-1],[3,29,-1],[28,3,-1],[2,28,-1],[88,2,-1],[54,89,-1],[51,54,-1],[40,51,-1],[62,40,-1],[90,8,-1],[64,8,-1],[75,91,-1],[10,75,-1],[92,34,-1],[34,82,-1],[82,69,-1],[14,69,-1],[14,88,-1],[88,46,-1],[46,93,-1],[93,33,-1],[39,33,-1],[39,4,-1],[4,87,-1],[94,62,-1],[62,10,-1],[10,83,-1],[83,50,-1],[50,13,-1],[96,53,-1],[87,53,-1],[87,30,-1],[78,97,-1],[78,30,-1],[30,1,-1],[1,86,-1],[86,5,-1],[23,98,-1],[23,64,-1],[64,58,-1],[58,95,-1],[95,65,-1],[5,65,-1],[5,44,-1],[0,44,-1],[77,0,-1],[13,77,-1],[13,99,-1],[21,98,-1],[73,37,-1],[91,23,-1],[13,81,-1],[23,35,-1],[17,71,-1],[45,92,-1],[64,85,-1],[78,14,-1],[38,49,-1],[22,21,-1],[86,94,-1],[86,27,-1],[69,90,-1],[85,68,-1],[91,36,-1],[63,78,-1],[22,86,-1],[12,6,-1],[12,43,-1],[52,94,-1],[56,0,-1],[94,35,-1],[48,7,-1],[93,78,-1],[82,39,-1],[35,41,-1],[97,86,-1],[82,11,-1],[18,41,-1],[21,91,-1],[55,81,-1],[2,15,-1],[79,25,-1],[28,32,-1],[60,13,-1],[91,95,-1],[47,42,-1],[16,42,-1],[6,88,-1],[20,78,-1],[73,61,-1],[78,76,-1],[1,62,-1],[31,54,-1],[18,51,-1],[91,62,-1],[3,77,-1],[70,39,-1],[53,37,-1],[23,77,-1],[89,35,-1],[0,41,-1],[41,7,-1],[87,63,-1],[46,27,-1],[41,96,-1],[58,76,-1],[26,66,-1],[18,68,-1],[17,89,-1],[20,56,-1],[6,41,-1],[3,0,-1],[44,89,-1],[95,16,-1],[33,98,-1],[36,51,-1],[30,75,-1],[11,17,-1],[95,37,-1],[17,26,-1],[37,66,-1],[13,5,-1],[45,80,-1],[43,96,-1],[33,2,-1],[3,23,-1],[21,37,-1],[69,39,-1],[76,45,-1],[88,29,-1],[4,32,-1],[43,22,-1],[62,58,-1],[95,48,-1],[15,80,-1],[84,36,-1],[80,11,-1],[91,49,-1],[66,39,-1],[97,30,-1],[28,67,-1],[22,65,-1],[11,34,-1],[95,83,-1],[31,37,-1],[34,32,-1],[72,26,-1],[36,19,-1],[50,94,-1],[53,48,-1],[8,0,-1],[47,89,-1],[47,32,-1],[53,17,-1],[84,83,-1],[41,44,-1],[37,8,-1],[85,10,-1],[96,86,-1],[27,93,-1],[39,56,-1],[94,75,-1],[89,66,-1],[63,17,-1],[62,78,-1],[67,30,-1],[17,12,-1],[44,40,-1],[63,91,-1],[59,85,-1],[43,68,-1],[93,0,-1],[78,49,-1],[67,34,-1],[63,28,-1],[92,58,-1],[88,23,-1],[30,13,-1],[51,97,-1],[29,62,-1],[43,7,-1],[72,18,-1],[18,91,-1],[23,85,-1],[11,97,-1],[37,70,-1],[58,16,-1],[86,20,-1],[98,72,-1],[56,46,-1],[39,6,-1],[64,7,-1],[64,71,-1],[2,48,-1],[17,65,-1],[51,49,-1],[60,67,-1],[27,39,-1],[84,31,-1],[53,70,-1],[20,17,-1],[73,89,-1],[95,35,-1],[8,1,-1],[58,46,-1],[44,75,-1],[50,43,-1],[45,27,-1],[30,28,-1],[42,24,-1],[57,25,-1],[32,90,-1],[27,50,-1],[35,10,-1],[4,83,-1],[93,13,-1],[97,0,-1],[60,35,-1],[77,5,-1],[69,63,-1],[42,31,-1],[35,17,-1],[46,60,-1],[16,76,-1],[42,69,-1],[15,73,-1],[69,45,-1],[23,18,-1],[56,44,-1],[63,65,-1],[75,54,-1],[91,51,-1],[97,93,-1],[51,75,-1],[38,70,-1],[75,60,-1],[41,70,-1],[12,44,-1],[79,44,-1],[4,31,-1],[41,50,-1],[14,97,-1],[48,88,-1],[95,23,-1],[54,74,-1],[78,45,-1],[61,26,-1],[83,78,-1],[90,40,-1],[15,30,-1],[29,96,-1],[67,25,-1],[81,9,-1],[19,29,-1],[63,44,-1],[80,6,-1],[12,91,-1],[59,74,-1],[7,3,-1],[31,98,-1],[16,23,-1],[16,49,-1],[2,89,-1],[69,20,-1],[44,99,-1],[18,5,-1],[67,96,-1],[78,79,-1],[90,72,-1],[3,34,-1],[56,61,-1],[81,32,-1],[36,17,-1],[82,75,-1],[31,15,-1],[68,37,-1],[9,37,-1],[25,70,-1],[76,56,-1],[23,33,-1],[20,24,-1],[62,30,-1],[30,45,-1],[99,25,-1],[40,71,-1],[15,3,-1],[30,66,-1],[69,52,-1],[98,88,-1],[16,52,-1],[44,78,-1],[41,16,-1],[25,8,-1],[34,20,-1],[53,16,-1],[2,9,-1],[24,91,-1],[95,14,-1],[90,63,-1],[27,61,-1],[82,59,-1],[20,53,-1],[19,17,-1],[66,7,-1],[46,84,-1],[14,41,-1],[87,33,-1],[24,10,-1],[92,59,-1],[28,58,-1],[89,22,-1],[17,21,-1],[26,46,-1],[21,46,-1],[82,0,-1],[27,92,-1],[32,77,-1],[35,97,-1],[72,59,-1],[98,10,-1],[98,64,-1],[36,63,-1],[70,76,-1],[81,24,-1],[55,53,-1],[10,63,-1],[46,98,-1],[45,95,-1],[34,40,-1],[60,44,-1],[6,62,-1],[48,49,-1],[14,68,-1],[1,69,-1],[71,43,-1],[35,77,-1],[41,84,-1],[40,33,-1],[3,45,-1],[2,6,-1],[73,98,-1],[68,64,-1],[11,42,-1],[47,81,-1],[86,64,-1],[88,3,-1],[72,7,-1],[25,2,-1],[63,60,-1],[26,38,-1],[41,92,-1],[97,81,-1],[23,37,-1],[65,13,-1],[95,4,-1],[27,24,-1],[39,89,-1],[21,23,-1],[93,5,-1],[81,35,-1],[14,42,-1],[49,31,-1],[72,21,-1],[52,57,-1],[96,52,-1],[75,89,-1],[10,81,-1],[55,75,-1],[87,39,-1],[8,53,-1],[40,9,-1],[68,28,-1],[39,98,-1],[61,66,-1],[54,96,-1],[5,0,-1],[69,16,-1],[48,99,-1],[6,37,-1],[42,7,-1],[30,55,-1],[9,38,-1],[82,70,-1],[90,79,-1],[71,11,-1],[86,91,-1],[93,83,-1],[32,64,-1],[50,74,-1],[82,36,-1],[18,83,-1],[98,8,-1],[44,61,-1],[54,80,-1],[81,92,-1],[98,42,-1],[17,59,-1],[50,60,-1],[69,7,-1],[74,43,-1],[97,36,-1],[85,7,-1],[78,80,-1],[82,6,-1],[7,98,-1],[73,94,-1],[64,65,-1],[79,7,-1],[60,39,-1],[74,67,-1],[60,92,-1],[81,69,-1],[85,96,-1],[53,42,-1],[88,18,-1],[9,0,-1],[84,66,-1],[60,23,-1],[5,89,-1],[60,52,-1],[6,71,-1],[8,45,-1],[31,2,-1],[42,71,-1],[24,35,-1],[44,92,-1],[63,26,-1],[36,44,-1],[87,94,-1],[53,56,-1],[37,86,-1],[22,68,-1],[83,42,-1],[65,53,-1],[58,8,-1],[26,21,-1],[9,88,-1],[75,1,-1],[3,9,-1],[40,48,-1],[98,35,-1],[15,0,-1],[94,37,-1],[43,5,-1],[90,65,-1],[24,40,-1],[79,32,-1],[61,41,-1],[70,21,-1],[50,5,-1],[87,76,-1],[92,2,-1],[89,43,-1],[69,11,-1],[6,85,-1],[40,61,-1],[2,66,-1],[57,22,-1],[54,53,-1],[46,34,-1],[26,49,-1],[1,27,-1],[59,62,-1],[5,62,-1],[23,86,-1],[80,95,-1],[95,93,-1],[75,33,-1],[67,48,-1],[94,55,-1],[71,84,-1],[76,42,-1],[96,78,-1],[46,74,-1],[55,3,-1],[6,91,-1],[75,13,-1],[60,72,-1],[76,33,-1],[72,85,-1],[80,61,-1],[39,72,-1],[79,34,-1],[54,86,-1],[14,32,-1],[80,46,-1],[37,43,-1],[32,97,-1],[26,15,-1],[39,8,-1],[14,26,-1],[4,80,-1],[15,97,-1],[79,48,-1],[11,7,-1],[80,52,-1],[94,49,-1],[40,13,-1],[90,74,-1],[13,52,-1],[85,55,-1],[77,87,-1],[93,79,-1],[14,92,-1],[33,53,-1],[81,25,-1],[78,42,-1],[2,55,-1],[98,78,-1],[95,21,-1],[61,9,-1],[9,50,-1],[27,10,-1],[9,90,-1],[82,22,-1],[80,58,-1],[57,70,-1],[84,11,-1],[96,24,-1],[76,94,-1],[82,25,-1],[82,74,-1],[37,4,-1],[6,59,-1],[64,93,-1],[77,85,-1],[51,8,-1],[19,89,-1],[0,17,-1],[79,18,-1],[86,87,-1],[58,32,-1],[85,39,-1],[51,26,-1],[62,23,-1],[96,63,-1],[89,20,-1],[38,7,-1],[85,3,-1],[74,64,-1],[99,35,-1],[28,0,-1],[75,35,-1],[72,38,-1],[95,12,-1],[39,1,-1],[75,70,-1],[5,27,-1],[77,81,-1],[82,29,-1],[31,48,-1],[21,64,-1],[24,55,-1],[81,51,-1],[35,21,-1],[81,93,-1],[43,98,-1],[87,0,-1],[55,99,-1],[45,68,-1],[80,33,-1],[71,53,-1],[65,49,-1],[13,4,-1],[70,93,-1],[65,0,-1],[7,1,-1],[99,75,-1],[1,20,-1],[13,42,-1],[6,86,-1],[9,6,-1],[85,15,-1],[10,33,-1],[25,42,-1],[69,62,-1],[18,50,-1],[94,58,-1],[68,91,-1],[79,99,-1],[12,33,-1],[83,25,-1],[5,39,-1],[59,31,-1],[30,85,-1],[64,41,-1],[41,63,-1],[30,93,-1],[17,69,-1],[87,72,-1],[86,98,-1],[76,96,-1],[83,54,-1],[55,83,-1],[82,23,-1],[33,38,-1],[72,6,-1],[0,84,-1],[84,61,-1],[71,80,-1],[92,31,-1],[67,2,-1],[22,44,-1],[72,9,-1],[99,97,-1],[11,62,-1],[36,62,-1],[48,82,-1],[16,54,-1],[67,54,-1],[75,53,-1],[92,63,-1],[43,53,-1],[59,79,-1],[47,9,-1],[91,83,-1],[36,71,-1],[45,62,-1],[79,33,-1],[48,85,-1],[30,39,-1],[12,35,-1],[33,58,-1],[99,7,-1],[74,11,-1],[95,17,-1],[11,44,-1],[9,4,-1],[19,35,-1],[58,43,-1],[93,87,-1],[79,10,-1],[62,88,-1],[21,18,-1],[1,81,-1],[97,79,-1],[38,88,-1],[38,99,-1],[3,80,-1],[4,26,-1],[21,83,-1],[11,4,-1],[39,15,-1],[15,96,-1],[3,49,-1],[21,87,-1],[13,20,-1],[87,34,-1],[53,40,-1],[66,88,-1],[64,79,-1],[75,81,-1],[67,68,-1],[23,48,-1],[86,80,-1],[95,82,-1],[49,21,-1],[95,71,-1],[94,13,-1],[55,9,-1],[56,25,-1],[76,83,-1],[36,26,-1],[38,5,-1],[71,1,-1],[87,2,-1],[17,10,-1],[22,10,-1],[47,70,-1],[90,19,-1],[43,62,-1],[33,69,-1],[94,5,-1],[80,0,-1],[6,56,-1],[70,89,-1],[39,42,-1],[27,59,-1],[53,85,-1],[81,71,-1],[52,9,-1],[72,24,-1],[96,47,-1],[6,84,-1],[32,76,-1],[67,71,-1],[94,18,-1],[1,17,-1],[97,4,-1],[7,57,-1],[90,46,-1],[61,20,-1],[95,7,-1],[64,73,-1],[65,80,-1],[94,31,-1],[67,78,-1],[69,22,-1],[54,8,-1],[78,8,-1],[9,44,-1],[1,44,-1],[1,31,-1],[72,61,-1],[39,29,-1],[66,19,-1],[36,22,-1],[12,82,-1],[61,77,-1],[38,56,-1],[5,8,-1],[66,83,-1],[0,85,-1],[7,60,-1],[19,23,-1],[86,30,-1],[20,46,-1],[29,14,-1],[22,50,-1],[15,55,-1],[40,92,-1],[25,0,-1],[87,67,-1],[5,33,-1],[32,53,-1],[32,33,-1],[65,19,-1],[82,41,-1],[27,87,-1],[3,62,-1],[37,18,-1],[99,49,-1],[76,92,-1],[18,85,-1],[12,98,-1],[75,66,-1],[16,32,-1],[72,74,-1],[37,40,-1],[54,78,-1],[49,88,-1],[55,58,-1],[84,88,-1],[41,71,-1],[62,70,-1],[22,96,-1],[34,44,-1],[49,86,-1],[29,75,-1],[10,25,-1],[79,20,-1],[83,75,-1],[19,4,-1],[81,89,-1],[20,75,-1],[84,16,-1],[92,61,-1],[76,1,-1],[11,95,-1],[4,20,-1],[55,59,-1],[30,58,-1],[77,71,-1],[9,14,-1],[5,60,-1],[56,59,-1],[38,67,-1],[32,45,-1],[14,36,-1],[77,9,-1],[49,79,-1],[41,49,-1],[69,35,-1],[99,87,-1],[81,42,-1],[20,33,-1],[52,28,-1],[89,1,-1],[35,13,-1],[54,18,-1],[46,13,-1],[45,28,-1],[63,16,-1],[33,26,-1],[99,50,-1],[31,33,-1],[15,76,-1],[66,94,-1],[52,84,-1],[90,41,-1],[52,93,-1],[19,58,-1],[11,26,-1],[22,79,-1],[86,42,-1],[13,98,-1],[31,86,-1],[19,21,-1],[84,77,-1],[89,53,-1],[69,93,-1],[61,83,-1],[76,57,-1],[5,87,-1],[58,17,-1],[47,45,-1],[78,64,-1],[19,15,-1],[32,63,-1],[38,22,-1],[3,63,-1],[82,3,-1],[47,53,-1],[11,72,-1],[55,43,-1],[62,85,-1],[71,52,-1],[44,14,-1],[80,28,-1],[79,13,-1],[45,24,-1],[99,28,-1],[47,68,-1],[50,64,-1],[56,91,-1],[85,97,-1],[21,20,-1],[83,68,-1],[78,35,-1],[74,70,-1],[47,40,-1],[11,92,-1],[60,22,-1],[1,47,-1],[77,79,-1],[96,50,-1],[93,51,-1],[15,24,-1],[31,44,-1],[59,2,-1],[2,71,-1],[73,25,-1],[26,99,-1],[1,88,-1],[60,2,-1],[96,87,-1],[21,33,-1],[76,75,-1],[17,84,-1],[48,36,-1],[30,10,-1],[4,91,-1],[67,85,-1],[79,39,-1],[34,7,-1],[24,7,-1],[22,59,-1],[15,1,-1],[63,52,-1],[42,45,-1],[25,71,-1],[15,44,-1],[88,44,-1],[79,61,-1],[52,0,-1],[70,51,-1],[92,96,-1],[53,57,-1],[2,82,-1],[64,13,-1],[59,77,-1],[20,3,-1],[58,56,-1],[23,78,-1],[10,76,-1],[33,44,-1],[82,71,-1],[3,60,-1],[97,42,-1],[44,98,-1],[27,51,-1],[52,77,-1],[72,51,-1],[35,48,-1],[66,25,-1],[5,19,-1],[55,56,-1],[48,18,-1],[39,24,-1],[53,97,-1],[8,38,-1],[17,98,-1],[39,97,-1],[34,15,-1],[51,32,-1],[65,54,-1],[92,54,-1],[14,91,-1],[25,26,-1],[0,59,-1],[34,8,-1],[60,17,-1],[69,23,-1],[74,81,-1],[96,39,-1],[5,37,-1],[44,81,-1],[39,14,-1],[47,27,-1],[0,96,-1],[23,49,-1],[70,52,-1],[28,26,-1],[2,54,-1],[58,96,-1],[27,6,-1],[47,85,-1],[19,22,-1],[68,80,-1],[44,69,-1],[0,4,-1],[97,68,-1],[86,62,-1],[60,10,-1],[15,10,-1],[69,49,-1],[0,14,-1],[65,18,-1],[67,43,-1],[66,23,-1],[26,52,-1],[30,74,-1],[40,77,-1],[35,3,-1],[16,15,-1],[88,86,-1],[51,60,-1],[65,14,-1],[7,61,-1],[94,96,-1],[41,28,-1],[94,85,-1],[18,96,-1],[10,65,-1],[49,9,-1],[53,78,-1],[54,13,-1],[0,76,-1],[78,41,-1],[14,86,-1],[13,38,-1],[64,22,-1],[23,29,-1],[39,88,-1],[20,9,-1],[78,36,-1],[99,1,-1],[64,84,-1],[13,89,-1],[63,27,-1],[33,52,-1],[72,84,-1],[34,47,-1],[19,2,-1],[24,38,-1],[94,99,-1],[55,42,-1],[33,11,-1],[54,76,-1],[1,32,-1],[67,94,-1],[29,4,-1],[84,24,-1],[98,57,-1],[32,23,-1],[64,27,-1],[23,70,-1],[8,48,-1],[93,91,-1],[37,97,-1],[17,50,-1],[87,52,-1],[32,55,-1],[53,95,-1],[70,68,-1],[81,94,-1],[12,61,-1],[23,53,-1],[18,95,-1],[16,77,-1],[54,7,-1],[87,47,-1],[12,21,-1],[12,86,-1],[2,39,-1],[24,92,-1],[48,72,-1],[44,42,-1],[52,18,-1],[37,71,-1],[70,59,-1],[38,78,-1],[7,51,-1],[58,60,-1],[26,97,-1],[44,54,-1],[70,12,-1],[20,51,-1],[5,55,-1],[20,49,-1],[63,54,-1],[46,9,-1],[55,35,-1],[1,70,-1],[27,41,-1],[86,10,-1],[60,19,-1],[57,37,-1],[99,53,-1],[43,61,-1],[67,97,-1],[55,80,-1],[68,32,-1],[32,66,-1],[92,52,-1],[78,33,-1],[36,55,-1],[32,25,-1],[43,26,-1],[30,73,-1],[71,74,-1],[67,40,-1],[68,60,-1],[84,9,-1],[23,6,-1],[56,8,-1],[33,1,-1],[83,81,-1],[53,62,-1],[64,10,-1],[45,34,-1],[63,99,-1],[49,11,-1],[10,39,-1],[82,61,-1],[71,30,-1],[60,25,-1],[30,22,-1],[98,95,-1],[48,27,-1],[6,43,-1],[92,78,-1],[43,15,-1],[76,68,-1],[19,95,-1],[16,83,-1],[32,48,-1],[30,76,-1],[14,54,-1],[76,85,-1],[66,13,-1],[51,68,-1],[57,23,-1],[75,24,-1],[11,59,-1],[43,90,-1],[32,15,-1],[9,28,-1],[78,86,-1],[86,75,-1],[6,98,-1],[25,27,-1],[50,42,-1],[59,86,-1],[80,94,-1],[61,81,-1],[86,19,-1],[72,12,-1],[21,10,-1],[61,78,-1],[98,15,-1],[12,88,-1],[15,70,-1],[81,62,-1],[26,69,-1],[28,62,-1],[94,72,-1],[7,0,-1],[42,64,-1],[39,34,-1],[14,28,-1],[64,61,-1],[56,10,-1],[1,14,-1],[91,67,-1],[43,29,-1],[95,54,-1],[22,23,-1],[58,83,-1],[79,65,-1],[62,2,-1],[99,69,-1],[93,57,-1],[96,7,-1],[47,56,-1],[45,83,-1],[73,69,-1],[71,79,-1],[7,50,-1],[40,18,-1],[6,26,-1],[29,13,-1],[68,96,-1],[27,22,-1],[46,95,-1],[62,50,-1],[65,44,-1],[43,38,-1],[77,18,-1],[16,96,-1],[85,52,-1],[31,6,-1],[30,47,-1],[89,46,-1],[75,64,-1],[25,86,-1],[52,64,-1],[86,90,-1],[96,83,-1],[84,12,-1],[61,68,-1],[49,28,-1],[54,48,-1],[59,78,-1],[6,76,-1],[91,47,-1],[92,65,-1],[2,30,-1],[18,2,-1],[33,71,-1],[92,5,-1],[20,45,-1],[15,25,-1],[19,91,-1],[88,74,-1],[49,84,-1],[38,98,-1],[80,56,-1],[86,50,-1],[68,59,-1],[49,93,-1],[96,44,-1],[25,51,-1],[21,43,-1],[69,51,-1],[3,8,-1],[97,28,-1],[32,52,-1],[57,8,-1],[46,10,-1],[0,27,-1],[23,76,-1],[47,25,-1],[76,88,-1],[39,0,-1],[15,47,-1],[25,74,-1],[34,97,-1],[30,25,-1],[81,56,-1],[34,90,-1],[14,71,-1],[34,58,-1],[21,32,-1],[72,33,-1],[26,44,-1],[47,76,-1],[77,6,-1],[85,37,-1],[45,38,-1],[59,83,-1],[80,17,-1],[6,93,-1],[37,20,-1],[90,6,-1],[95,42,-1],[32,24,-1],[77,2,-1],[96,51,-1],[26,85,-1],[27,71,-1],[43,0,-1],[36,38,-1],[17,2,-1],[12,56,-1],[99,36,-1],[59,34,-1],[23,2,-1],[68,81,-1],[57,63,-1],[13,83,-1],[45,22,-1],[56,93,-1],[60,93,-1],[33,29,-1],[24,44,-1],[69,71,-1],[93,32,-1],[23,59,-1],[88,85,-1],[3,41,-1],[71,19,-1],[73,9,-1],[20,87,-1],[95,73,-1],[90,56,-1],[13,12,-1],[28,11,-1],[43,63,-1],[66,65,-1],[63,64,-1],[77,41,-1],[86,26,-1],[52,67,-1],[77,26,-1],[82,46,-1],[94,29,-1],[54,99,-1],[28,65,-1],[3,59,-1],[87,89,-1],[17,14,-1],[32,10,-1],[28,38,-1],[36,11,-1],[73,13,-1],[31,5,-1],[8,33,-1],[67,27,-1],[77,21,-1],[88,4,-1],[80,31,-1],[2,22,-1],[99,22,-1],[6,11,-1],[7,56,-1],[44,19,-1],[33,19,-1],[73,40,-1],[82,9,1203532],[45,75,3715492],[39,23,9075897],[32,43,5818019],[90,51,4060914],[36,27,6745607],[96,17,6133848],[12,36,9272332],[18,90,9531490],[70,95,9663374],[40,84,7397255],[9,35,7864968],[2,47,7505856],[47,36,5891936],[29,45,380827],[58,11,1489084],[75,8,4851376],[18,47,1201852],[53,83,6766139],[6,33,7410424],[72,67,1646978],[10,99,652287],[43,13,9231783],[74,13,7445241],[85,61,4667895],[7,5,6515499],[16,35,878888],[39,25,6545042],[31,18,9789730],[63,42,6756119],[57,12,9488224],[61,62,8976457],[71,73,5534278],[70,3,5715130],[30,35,1237470],[17,74,3919953],[83,67,6396384],[20,10,9390387],[99,8,2312356],[70,87,8635049],[83,90,4508593],[15,79,7505965],[87,85,8883944],[54,64,2314917],[48,13,4126451],[1,43,6210317],[36,1,7735443],[55,1,6190483],[78,56,5324777],[33,96,9870782],[91,42,908972],[39,86,8721963],[90,16,7371083],[60,49,1794710],[29,35,2933475],[96,21,4203507],[48,75,7253967],[64,35,9595447],[90,93,4822958],[62,42,1833883],[22,52,9675862],[79,87,4848605],[18,71,6975112],[66,99,9765484],[55,73,9574515],[14,76,8138296],[84,10,9018273],[96,1,9116954],[70,54,4167825],[76,81,6014482],[56,24,4274583],[48,21,6925666],[6,50,502373],[82,40,1656743],[43,45,42613],[35,62,7651167],[39,45,3010293],[22,84,914813],[97,9,3744202],[52,27,2869362],[84,19,3823645],[99,17,3687532],[57,10,9610355],[92,12,591498],[13,32,3628450],[19,25,2543547],[33,73,935133],[54,97,6567161],[42,5,936984],[54,6,7804300],[35,86,7726253],[70,65,637704],[37,72,5248268],[20,19,3858748],[59,54,8523557],[68,20,4015579],[5,25,9682244],[61,69,2306590],[40,2,9789148],[55,38,3219166],[61,71,7078185],[45,48,9880738],[51,71,7886956],[63,72,8626999],[15,38,5472271],[16,9,4244826],[41,80,1931259],[44,21,3652029],[96,37,7927281],[95,20,7276655],[60,0,3651361],[78,25,7612855],[18,86,6005915],[73,12,4342841],[58,20,4433474],[78,10,694226],[10,42,8645429],[10,0,2011037],[27,74,5560240],[19,11,5087822],[48,83,494379],[71,63,5767443],[35,71,3575320],[58,91,2238488],[5,96,1755024],[13,6,7090539],[14,53,1631679],[10,67,1621227],[2,20,743668],[39,67,255649],[67,64,955252],[28,54,4694917],[27,97,3455641],[22,51,7258206],[68,30,986470],[54,15,9735326],[56,1,1162643],[18,84,4057177],[6,73,5287342],[17,87,3263097],[85,46,1003476],[57,79,9184455],[14,56,5704683],[83,38,9186280],[57,40,2555651],[84,30,1351369],[98,96,565471],[95,13,7108919],[69,28,2977019],[41,93,136003],[29,98,640013],[36,85,5361394],[93,39,8206924],[39,84,8282012],[10,91,3150777],[43,92,8403637],[60,96,6924681],[59,14,9807881],[13,2,6121517],[32,61,1341412],[12,78,5794371],[86,72,7865143],[42,20,6228745],[13,84,1292047],[51,88,3467494],[19,14,5909588],[98,14,6122605],[9,27,2205085],[78,7,9186423],[67,42,658185],[86,58,2932825],[49,18,7673360],[43,85,4426334],[54,87,3686757],[3,78,7661593],[42,74,4273014],[79,11,8516588],[45,4,6894760],[44,38,9885107],[38,51,9934876],[97,58,5060866],[53,90,4896168],[60,77,1244900],[74,78,8190864],[94,78,6894306],[88,28,9196481],[36,7,2189229],[26,19,5822571],[23,25,9226671],[54,17,3911933],[91,53,3544969],[60,8,487274],[4,51,153736],[74,95,6444730],[81,88,7165953],[45,12,2636759],[43,77,6221991],[78,43,1687532],[30,12,7793380],[47,33,247665],[65,52,5573638],[36,9,6139150],[90,99,1117533],[8,44,4279562],[51,9,9535431],[22,83,8832624],[36,33,1172064],[27,65,6993893],[74,22,4971644],[3,56,9812928],[24,62,8891449],[84,70,3038447],[85,41,8308421],[11,2,4439752],[78,90,9111627],[27,40,4567160],[84,48,4583959],[58,1,6081532],[12,40,3236392],[6,60,6552218],[54,82,2079811],[3,68,346996],[49,29,14495],[40,46,9490703],[91,71,7303900],[80,42,6875327],[12,38,4749458],[49,95,7357708],[31,21,6366218],[6,20,5335230],[7,25,1239774],[95,79,4371873],[6,3,6857059],[93,31,6757905],[73,46,7422275],[55,20,1407101],[93,82,6756762],[84,92,332797],[58,93,5900108],[35,54,269709],[34,42,6261329],[43,34,1240839],[22,39,5125350],[70,5,397410],[90,70,6658277],[61,6,6335210],[64,44,6252926],[87,7,7578310],[98,25,2752090],[87,81,4510605],[49,1,3120887],[94,57,153926],[72,34,2850751],[73,24,7952172],[87,15,4338380],[43,30,1520792],[12,63,2739071],[76,21,8757304],[61,49,5861363],[98,30,5769017],[61,39,2132055],[50,57,1327305],[56,86,9712075],[59,10,3748043],[89,31,8913365],[42,90,8443034],[94,6,4580422],[60,76,4036881],[34,94,6654526],[98,20,7730831],[79,4,9922500],[60,91,4337922],[88,67,2494460],[70,56,4850740],[98,47,9302778],[27,38,2465664],[65,57,1549369],[40,38,918895],[0,19,8167119],[13,69,5203589],[57,66,9863542],[83,46,6868863],[78,81,8771919],[30,36,5583212],[32,7,2629836],[4,58,1264620],[70,33,5201941],[73,20,5666348],[49,19,2001105],[26,18,597954],[66,42,338354],[91,64,2132117],[64,69,4051610],[31,65,4429612],[97,74,265005],[31,56,1282893],[86,82,7158631],[8,95,8914479],[15,64,7377324],[57,14,731396],[83,11,3985366],[38,62,8187206],[23,61,6046651],[8,69,7586170],[89,50,1867509],[84,82,6436375],[97,22,3351207],[3,21,3138434],[43,66,8871094],[23,5,4912148],[66,60,9449660],[66,15,882950],[87,57,4650868],[49,97,1913876],[91,69,4481777],[50,77,4699258],[74,83,4497637],[38,46,3196757],[53,22,9965120],[14,75,9150223],[54,66,2398344],[65,85,8821749],[6,48,3633628],[27,3,4375123],[37,59,628501],[93,88,7138081],[73,34,1666730],[78,48,6186356],[28,75,6149578],[59,19,5709307],[75,36,9657787],[6,19,6997197],[28,13,9297909],[26,48,8920367],[25,77,50803],[56,29,5685185],[63,53,9557182],[62,0,2381361],[83,64,2231563],[16,43,7017200],[18,27,5042248],[92,21,697846],[40,15,5338764],[83,88,7775826],[98,91,1561068],[41,31,7645631],[13,82,2452559],[98,99,7917230],[29,38,9538046],[86,55,5248164],[0,70,4384359],[99,71,5677090],[17,3,6575647],[96,81,4063942],[48,37,1260288],[85,86,5864089],[39,76,6426503],[3,14,7912263],[51,82,5750733],[62,63,4840320],[48,25,8862048],[99,85,4323612],[65,1,3642544],[41,99,385131],[40,69,1836362],[32,35,5906139],[80,64,3752441],[57,69,9656230],[38,77,7950072],[83,56,444658],[29,87,251946],[66,35,3359989],[40,22,3424986],[72,13,5962452],[4,43,7394168],[72,81,3612021],[84,79,627080],[12,22,9833521],[58,38,9448476],[40,21,764898],[76,67,8175095],[94,26,4656291],[23,80,603659],[29,72,9827158],[33,64,4702189],[57,96,4208449],[86,65,5204846],[39,68,8557140],[43,44,1096944],[72,55,8230315],[50,67,1711502],[48,34,740369],[54,42,9245021],[11,48,2660383],[41,59,612862],[77,99,9278482],[4,8,5676910],[82,78,3863680],[28,61,1319719],[67,41,7937820],[20,85,1640865],[82,97,7304610],[27,11,3576190],[94,92,2565511],[59,48,4170453],[63,80,7320429],[92,70,7665419],[95,39,9842839],[91,74,59215],[10,47,7841759],[27,76,6594173],[88,0,1737552],[15,62,3776864],[30,37,5806670],[95,28,2491144],[68,9,3265799],[1,80,9389288],[34,53,2926405],[54,73,3760848],[28,98,8666966],[6,49,4066935],[67,75,6732411],[87,66,3189254],[50,84,962787],[31,43,5388056],[83,71,3290855],[45,58,3594549],[49,82,3264388],[71,60,3308701],[34,86,8246739],[86,84,7757471],[74,14,6316432],[84,3,2881072],[21,36,8957648],[56,74,1745617],[16,18,8688385],[59,97,1878249],[65,21,284524],[57,16,7433435],[83,3,1474108],[98,53,1548836],[10,9,256181],[18,10,5691048],[2,7,5270479],[81,7,20274],[30,51,3569677],[68,21,2505092],[17,42,2763340],[64,47,6455755],[77,58,5720896],[86,95,7723543],[67,9,7759763],[24,36,7841784],[46,12,7086126],[71,15,8228877],[24,68,4988945],[63,30,3904906],[96,95,8888651],[37,28,6535481],[42,68,1683679],[63,59,5513154],[92,4,6341385],[65,67,5364465],[3,71,6707368],[48,62,5723482],[90,31,3123576],[73,36,6529095],[44,10,1808083],[18,64,760346],[2,83,4460336],[22,13,2223646],[91,8,854469],[16,50,8290123],[45,56,9184688],[73,26,8080520],[79,37,5619841],[60,15,5805835],[39,62,167833],[55,26,9380697],[30,48,1639829],[12,16,3428462],[98,63,3618987],[20,96,1599645],[47,55,4534228],[20,39,6607482],[67,80,8254356],[57,75,9372421],[3,38,6492347],[65,50,7413953],[64,46,9340901],[39,35,4931489],[99,42,6853234],[2,44,2448657],[77,75,3322578],[11,96,9361762],[7,67,7149421],[26,82,9693052],[62,49,4592886],[26,98,1207997],[83,57,7320992],[22,85,6069669],[38,48,8395416],[80,16,3385351],[57,48,5621113],[76,91,6337219],[76,74,2525257],[33,43,5339933],[95,43,7063799],[8,71,4418094],[56,43,8734118],[3,97,3060780],[92,48,2427062],[6,69,8750488],[24,41,7561470],[67,36,6534693],[46,63,8010029],[10,3,1117780],[80,44,3144070],[72,41,8952855],[94,22,3906905],[99,88,6130783],[17,81,2607594],[40,58,7290474],[57,82,3830217],[17,5,5436393],[40,52,8648000],[1,67,5569602],[63,51,5654343],[11,30,6051989],[89,60,7185556],[43,28,553370],[50,93,4200414],[68,33,6322840],[46,44,615243],[29,36,1010532],[70,27,6558730],[88,68,8109877],[42,84,5992479],[74,75,2627596],[77,93,6036892],[60,16,3986380],[54,38,510040],[62,20,5177912],[63,50,1676557],[67,23,822613],[7,80,4253992],[75,41,9971558],[19,96,1642531],[39,75,7843963],[73,3,4472960],[49,15,9823637],[3,54,4269194],[48,65,5594417],[23,44,8971305],[73,32,97250],[46,36,9546664],[74,15,5169429],[2,68,6979643],[52,79,6059443],[4,40,6447273],[2,91,3901970],[31,60,6586954],[13,16,8647691],[51,67,4614263],[58,7,6937269],[93,16,4979913],[70,18,4317076],[0,63,8273476],[50,52,5393383],[94,68,4905316],[35,50,1152919],[60,64,7606094],[7,27,4773003],[95,50,7499575],[54,43,6909261],[40,99,3734658],[50,82,8839592],[40,89,1450093],[17,64,7066631],[7,49,277136],[95,26,2246919],[37,89,3747185],[4,78,746958],[8,29,6294673],[92,51,8925969],[0,74,399848],[79,35,3481261],[69,85,3778589],[57,54,7137356],[17,79,9288275],[13,49,7461949],[15,58,3031870],[83,86,9982627],[29,7,7886453],[52,10,7303802],[7,19,3376778],[80,43,5006846],[63,48,1482514],[69,53,5134026],[61,87,8162153],[95,25,1702413],[12,4,6916199],[79,8,3852214],[59,16,7089672],[3,26,5072655],[64,88,5862047],[4,49,8653421],[56,48,7345288],[24,4,6540697],[67,6,1751593],[73,44,1900595],[71,31,8688839],[62,82,7435300],[60,53,8396502],[78,37,6540011],[32,29,6517287],[74,39,9933416],[81,20,3967159],[39,38,66649],[83,79,7941738],[22,4,8324393],[43,73,5920329],[24,48,6581631],[33,7,6400147],[17,45,6154972],[86,46,2706838],[91,16,363699],[8,2,9300994],[76,7,6362779],[97,7,5404956],[62,96,316443],[25,90,5964932],[32,20,1727256],[19,82,5607535],[43,87,5330775],[40,88,5886429],[96,69,8171912],[23,27,1471561],[57,2,3489212],[67,15,1516684],[81,65,125976],[91,57,6618583],[64,70,617138],[15,78,2399636],[35,93,2180996],[64,89,2996197],[66,33,5813779],[29,26,7932166],[59,94,7618284],[33,60,7925891],[41,2,4821964],[50,78,5829294],[74,33,2454954],[18,74,790711],[81,36,5196794],[2,26,722706],[1,90,2026129],[39,77,2783747],[50,30,8844529],[70,17,2579565],[45,6,5967795],[26,71,9021151],[1,18,7282339],[92,0,4655805],[43,79,1883078],[28,16,209853],[61,42,1521542],[70,49,8187383],[62,52,8375810],[5,64,9978218],[5,57,9550239],[36,6,453525],[11,78,5435466],[56,99,4338504],[95,55,8747606],[94,56,3623115],[58,79,445147],[97,71,1477101],[95,85,6992692],[62,67,28880],[2,53,865418],[38,11,2800346],[40,39,8113298],[40,14,230993],[33,25,7004432],[1,83,4236514],[98,60,1087172],[87,44,9998306],[25,72,7381573],[76,8,204705],[55,48,4415832],[82,58,7233369],[73,39,5428972],[38,20,5647372],[71,32,1032906],[89,71,5514836],[4,82,4327201],[17,97,1358647],[84,78,4718482],[82,94,9875088],[4,18,6445433],[33,24,9931038],[94,93,4377355],[68,13,8353390],[60,94,2441004],[72,43,3433075],[95,61,8899573],[47,93,4496218],[10,26,7319633],[20,40,692681],[74,48,7458331],[88,55,6741638],[51,58,5822164],[23,14,8762110],[25,64,8270455],[33,56,5426719],[35,40,8893231],[51,80,7507989],[35,46,7367825],[62,90,3983011],[65,55,5135984],[64,31,2406597],[14,89,2279262],[62,18,546241],[86,60,9815440],[88,95,609115],[52,5,9512158],[99,61,4415656],[4,90,3095369],[38,84,5237424],[78,22,1591158],[2,65,138876],[80,13,7611459],[63,24,9981774],[77,62,8339813],[46,97,1169679],[32,31,6935151],[81,46,9214809],[23,75,6938583],[62,76,3276825],[50,45,8724998],[45,15,2433887],[17,86,5727110],[71,49,9325701],[13,62,1548366],[9,60,460924],[40,29,9684349],[96,35,7001440],[62,87,4034689],[15,52,6573871],[15,84,7502184],[8,66,3504748],[75,87,2915543],[19,27,3394089],[65,83,676344],[80,25,2582514],[6,95,3400199],[41,62,9327851],[1,91,5042550],[32,42,9018193],[43,23,8577351],[18,24,4564240],[43,64,1273420],[60,37,1560643],[99,86,3232016],[20,16,1574984],[87,98,7570309],[45,14,5393657],[7,84,9038488],[11,57,7319047],[34,6,1802560],[92,73,7413075],[78,52,7632689],[37,10,1280017],[49,57,9905877],[3,86,5371427],[24,52,5623917],[42,79,1066044],[52,73,9031856],[1,52,7582707],[34,76,2109215],[87,42,8301481],[70,2,249403],[60,18,3746895],[38,85,715301],[51,89,1477439],[81,14,5372956],[58,98,1858597],[53,66,2135293],[58,90,7515345],[39,71,9529815],[77,66,5916161],[8,41,7733730],[81,33,6688370],[53,12,1269192],[66,40,9687431],[28,74,1767307],[45,26,1208006],[64,87,450685],[71,23,3017020],[48,12,8527536],[19,1,8748663],[23,63,9213426],[55,18,8048853],[45,52,6613571],[46,91,7320172],[71,20,2923615],[55,96,952259],[52,17,2779887],[94,21,2835553],[88,5,44325],[14,73,183047],[87,90,2071515],[3,44,1832407],[81,27,9474237],[70,67,2394326],[16,48,2152770],[11,3,6230747],[75,49,4299084],[70,14,521731],[83,17,7056128],[76,24,1490091],[58,3,9957948],[18,12,6019338],[71,62,2897297],[16,81,8213811],[29,17,2989545],[84,54,220773],[8,12,9794013],[7,4,3099981],[2,21,4142358],[85,82,8481470],[46,77,5504196],[11,41,9158847],[53,29,7282998],[43,24,3450027],[27,91,2782771],[39,32,5377504],[89,0,8591612],[67,86,3106913],[31,0,8740244],[67,0,4334687],[81,15,5092386],[47,17,8387557],[47,43,8965844],[60,32,6304569],[31,68,8996029],[54,1,5269351],[46,17,398259],[90,85,562432],[90,66,3423961],[45,36,4773182],[77,86,8236855],[67,57,8958307],[94,4,6501101],[6,63,5322564],[84,34,972885],[92,77,170324],[21,75,7732539],[31,97,8950057],[66,86,561964],[63,19,9804644],[17,37,179000],[55,34,9172743],[12,41,8534301],[92,17,2661039],[11,25,7748719],[74,16,9294981],[38,81,695174],[31,82,5824552],[70,43,5807398],[59,40,578078],[49,17,4940340],[12,19,9217232],[22,26,998679],[55,82,1336769],[58,67,948411],[16,24,3341960],[47,46,690431],[52,72,7282947],[38,21,3812795],[69,78,1634068],[24,6,9527476],[80,60,639557],[51,74,7470815],[37,25,7419584],[56,21,9084121],[5,2,2962852],[28,44,4124768],[45,51,977804],[85,2,648571],[5,26,19570],[45,81,6206315],[96,2,6250363],[35,34,3479111],[70,36,3364144],[26,88,7254121],[35,92,5100221],[24,86,7467202],[67,21,7426191],[47,23,7874814],[35,74,2396777],[46,71,467745],[52,35,5960340],[66,46,1857602],[57,80,8349589],[55,37,5885094],[66,95,4177387],[16,65,7404838],[84,69,2999364],[46,2,6830751],[34,70,6876946],[67,20,7597694],[81,73,6189048],[27,13,9869582],[94,24,9828606],[55,11,7862980],[16,2,623203],[56,87,3444989],[88,65,70242],[52,39,2532382],[28,22,9791861],[0,49,1142232],[12,71,5952298],[11,98,1810714],[69,68,9550608],[87,59,3110337],[34,71,3600744],[10,14,3093253],[60,57,2800820],[3,98,8645361],[38,94,5427500],[2,49,315372],[79,85,7998],[21,71,7473657],[56,35,3139335],[32,92,7737391],[76,97,6162459],[54,19,3467169],[97,66,3836284],[47,61,4052573],[2,63,2471818],[88,71,5317958],[79,29,2365013],[49,74,6926119],[54,68,931448],[77,70,853113],[17,23,8604049],[99,46,2389825],[2,74,4924493],[6,78,1023290],[67,31,7850480],[80,85,1114900],[11,35,9143231],[51,0,4645344],[29,55,3726921],[81,90,7859100],[21,7,8487535],[17,77,213625],[90,12,4941200],[84,91,1906237],[58,24,5091160],[70,35,2292831],[76,48,6551856],[91,61,198787],[99,68,6267270],[2,43,7387786],[45,73,1855269],[54,61,6723680],[84,27,2840899],[59,81,4339918],[62,47,6746428],[56,27,2392460],[55,0,9877407],[81,8,2029714],[13,9,8507146],[31,83,9723800],[9,69,1560001],[38,17,3183689],[63,22,8219786],[18,19,2173977],[2,95,3828739],[72,23,2157637],[84,63,4088219],[35,37,3485433],[32,96,3674985],[13,25,6536806],[44,55,8207083],[76,63,1784547],[60,28,6803506],[71,7,2326394],[72,66,6753518],[94,2,8521911],[24,30,7510732],[99,73,2000222],[96,23,5428818],[25,20,1212744],[0,66,7271237],[49,81,4924832],[50,70,9992054],[11,20,2904172],[2,34,5569280],[54,58,6135789],[30,83,3916463],[22,77,206108],[54,23,5672176],[53,1,4490407],[15,68,2985298],[86,61,1893821],[38,53,7300698],[59,96,8252717],[33,42,551950],[5,47,2828059],[42,51,4900308],[30,96,1103777],[76,65,3630968],[59,42,9188664],[42,93,1418453],[27,55,9633091],[24,60,6347880],[6,30,3100605],[11,13,4530200],[62,31,8613346],[22,90,2608949],[3,30,6835100],[47,37,8687772],[3,65,3369723],[56,50,8762964],[55,12,1103200],[33,14,3129019],[67,45,369451],[51,29,7570711],[6,74,1933018],[29,95,1728718],[54,85,7328534],[86,51,5294571],[91,79,8111853],[86,40,9048712],[60,27,4839855],[73,86,2180432],[11,64,826275],[4,35,1833075],[7,83,842218],[99,14,3660195],[30,4,2737633],[39,80,6901996],[18,99,7579236],[41,30,4208224],[39,83,6947437],[65,30,2728605],[90,39,8072255],[92,74,1820071],[54,93,6012139],[61,5,2440006],[80,49,7656690],[29,5,6711015],[70,32,7150811],[5,72,992011],[6,0,6086977],[73,77,8085631],[44,68,6824814],[32,0,7481766],[2,97,2811876],[17,88,38734],[5,79,5181096],[69,54,131523],[65,45,2894452],[21,30,5979146],[83,36,7792888],[49,67,2051190],[9,59,4827971],[61,29,449748],[29,6,2244448],[85,27,5076739],[79,54,2908824],[37,13,4685987],[83,26,1634358],[89,42,6888328],[41,4,6521438],[3,12,5268324],[55,87,1086843],[39,94,3142107],[89,63,9828046],[89,32,3289265],[41,46,7697251],[11,89,4143606],[62,26,5459598],[81,30,3114524],[44,70,4192040],[4,15,4942758],[79,86,6192763],[78,18,757229],[84,5,9060841],[89,77,3391085],[97,43,175397],[31,79,1629606],[54,91,48201],[63,61,8036917],[3,1,7732672],[12,60,4318963],[29,54,201931],[0,23,2811743],[46,50,6695662],[11,68,7272709],[12,9,4810543],[46,57,4192343],[81,84,7317872],[31,78,922529],[66,64,8087655],[10,70,1162685],[68,48,8471899],[54,71,9205919],[17,28,9468239],[4,76,1139190],[23,4,528980],[42,37,6694952],[89,86,2631585],[70,58,5339191],[29,81,4654566],[90,17,399466],[76,25,8691285],[82,8,5670335],[63,20,7979906],[94,46,6431354],[65,75,4019618],[54,41,5436312],[54,33,9230423],[37,22,9475846],[49,40,7695474],[51,53,5339889],[16,10,5895649],[8,97,940728],[60,99,376032],[61,88,6205896],[58,37,3201152],[55,46,1232294],[45,23,2727340],[90,88,7632064],[18,93,5485374],[94,40,3504839],[91,77,7423500],[47,95,3215039],[78,99,8443694],[72,97,1907960],[81,18,9657317],[23,10,1874690],[19,97,2338361],[32,30,2085740],[39,99,3650446],[92,9,4407723],[2,14,667252],[17,41,3811402],[2,69,6382283],[31,26,6768235],[53,15,7375038],[12,76,692601],[4,52,2420868],[85,34,648445],[31,76,1823395],[34,9,5618002],[21,73,207050],[19,51,9598826],[26,84,3773477],[83,89,7179971],[71,98,5969218],[58,81,3341198],[29,41,4110683],[51,46,5526567],[68,84,7770751],[77,45,9724311],[79,0,9433849],[70,61,3097488],[34,26,1158962],[15,94,3862867],[82,53,4170821],[54,46,5285751],[50,24,2472638],[66,68,1560342],[20,36,6811398],[66,85,7011709],[55,19,8629925],[92,1,7687728],[97,38,544657],[56,51,7022823],[63,34,1914875],[94,1,3724309],[16,62,1468216],[6,46,4748615],[25,53,159209],[7,90,1448044],[38,2,376639],[57,90,5148117],[10,71,8861872],[40,72,9478310],[85,89,2850934],[99,29,9928437],[76,40,2985011],[96,97,6004183],[73,97,7718731],[61,53,9696610],[12,67,8603391],[69,88,3375447],[24,71,9462142],[60,97,2032059],[6,83,500695],[88,15,7566963],[31,34,5281653],[38,96,2676273],[9,48,4928198],[51,12,4648208],[83,35,2027745],[29,80,8458621],[48,5,6004765],[4,2,7444349],[57,44,8000865],[11,29,542036],[43,76,9332216],[74,53,3937802],[94,97,6926286],[62,37,3143479],[64,2,5569699],[69,25,8944567],[32,50,2077538],[70,80,3646617],[45,61,1696805],[98,75,3726039],[85,5,2919015],[25,3,2705010],[92,53,7105770],[56,68,8715286],[45,64,2685486],[30,34,6485137],[54,22,2668142],[40,17,6307912],[23,89,8795075],[77,90,3858325],[92,10,4487168],[78,95,4816048],[34,91,862170],[18,75,2196497],[97,65,8061490],[79,14,7841610],[96,66,6514281],[13,24,1511078],[25,88,5991850],[38,4,5112391],[93,15,9566652],[67,19,9321044],[44,83,9842583],[21,27,7164038],[22,55,2836624],[2,84,596204],[86,43,9342208],[14,85,187058],[41,36,2567296],[4,71,9913042],[38,60,5683140],[98,92,4709664],[86,41,7900359],[18,11,7098090],[97,98,771394],[48,50,7520513],[16,86,5100686],[98,84,5390326],[1,77,2918936],[36,89,5442579],[89,48,8569018],[88,72,3935912],[19,87,5352856],[66,55,7428253],[67,66,7956944],[82,60,3680816],[88,54,5974106],[5,12,1216136],[26,56,5189674],[27,95,6746976],[24,0,2998116],[66,14,6204869],[94,48,3471776],[66,91,8209224],[69,98,2722667],[1,0,6567863],[57,58,9278399],[52,20,4918782],[86,7,396172],[21,93,4743090],[41,94,9942614],[61,48,7431500],[31,57,8086436],[58,44,3154940],[12,11,5580170],[12,20,7186828],[31,11,47739],[24,88,5811992],[72,15,1706281],[85,78,860217],[25,29,3038541],[56,88,5675413],[28,25,135063],[93,67,7383531],[22,41,7177215],[95,32,7415644],[95,76,7522464],[88,59,9052075],[50,58,4473040],[37,52,9424787],[13,87,1812108],[93,61,8905895],[50,81,2798987],[72,92,8319391],[29,30,1335333],[89,80,9243817],[50,47,5744151],[46,75,8702418],[51,61,9695371],[6,42,7725571],[18,36,8384552],[40,78,8061419],[88,58,10436],[80,81,9571284],[60,84,5739127],[52,95,5314503],[13,44,93006],[16,45,9105134],[37,36,7143230],[36,16,5194944],[5,54,7930141],[23,51,1562870],[87,23,1494796],[96,12,4294664],[89,55,3227086],[79,3,7297451],[71,93,4712807],[38,76,4320021],[74,47,1290356],[18,45,3512365],[22,88,8924878],[42,41,3478780],[55,21,6940169],[15,11,5006115],[46,79,9416089],[47,22,6179989],[78,5,4832604],[99,93,4224904],[78,87,264571],[8,47,6988250],[72,56,942617],[73,90,9254325],[69,77,78323],[97,62,7666190],[28,21,4978396],[68,19,7817258],[21,54,3053046],[9,24,6550043],[84,35,778297],[8,67,9669944],[72,70,597339],[37,49,5612176],[85,28,274339],[7,92,9035115],[25,31,3594960],[27,90,2593901],[46,28,8950603],[50,98,7121409],[12,25,4779300],[1,51,9337892],[2,80,7803725],[76,9,30498],[52,49,7158568],[65,93,5338497],[49,53,6910984],[31,58,3468637],[30,80,6242241],[86,13,8181108],[97,13,8762540],[38,30,3683984],[34,80,846656],[56,41,6907401],[23,31,5535130],[67,32,2583512],[55,92,7607787],[5,4,1987190],[81,21,9567604],[12,87,8941100],[25,40,5911462],[57,36,5934720],[89,95,7621049],[47,71,1344996],[22,33,9429273],[1,60,6888243],[33,0,9129212],[91,50,9004628],[56,97,6960613],[69,4,6041345],[41,58,9931974],[74,32,7632677],[62,65,309041],[55,49,5425324],[59,53,3021009],[3,36,8561908],[94,28,4195176],[55,51,8943438],[1,73,4168939],[91,72,2767998],[72,10,8382448],[59,50,8772127],[95,24,7136369],[46,7,1872078],[35,82,1035577],[67,82,1418847],[18,76,3088063],[46,87,3758415],[26,32,9569903],[87,80,1614854],[72,50,5308789],[82,68,4290092],[56,37,4993283],[36,86,9010612],[83,99,7199266],[19,75,9643418],[63,47,8680500],[7,31,1040449],[38,1,9035391],[73,58,5449212],[4,1,4601973],[29,67,8374003],[47,19,4445033],[8,62,1017550],[37,67,9793060],[94,32,6591892],[42,38,7511184],[84,45,6636216],[11,81,603202],[32,65,4041572],[20,74,7764647],[15,36,6424161],[1,24,8660662],[22,61,7827994],[3,31,4418299],[92,69,3004953],[74,66,3291879],[67,90,4258496],[44,53,9812582],[37,7,3193370],[47,52,3496592],[47,88,8251180],[46,33,6517238],[92,3,818359],[26,12,9039505],[11,22,6196291],[1,11,2293158],[27,72,9478540],[68,53,1127058],[41,1,641168],[75,69,7141641],[61,55,9483262],[80,8,4423103],[80,76,9704840],[40,64,3031695],[32,3,7728689],[46,1,2176694],[27,88,2467214],[59,29,835082],[2,42,5495678],[76,66,2262623],[49,77,2908210],[28,1,7388195],[31,77,294186],[14,47,968754],[24,17,2655884],[12,83,4516678],[60,43,2144751],[37,1,2970478],[68,50,2591644],[93,40,2796455],[93,80,6746288],[24,12,7163568],[33,17,6340832],[68,27,2111226],[34,96,1394448],[63,81,5849872],[97,95,3203907],[49,72,5481014],[29,18,8806183],[23,11,2011996],[67,84,1018601],[67,26,8964428],[98,76,3227120],[47,44,5107185],[45,31,3222414],[26,74,153416],[86,0,1954954],[61,14,9365812],[3,75,8218342],[0,98,6277561],[85,12,2506612],[31,75,9111972],[9,75,9780254],[86,21,7963640],[33,67,2826467],[57,17,5067048],[9,98,4897385],[44,17,6576022],[46,30,2456291],[76,53,814831],[31,96,5882874],[34,17,189402],[48,86,6090044],[41,48,3651174],[34,88,6800944],[33,28,6843597],[54,11,8539412],[93,59,3555847],[26,35,3015920],[80,10,129913],[4,36,8221257],[52,7,3606574],[57,39,2127057],[51,16,3283870],[70,81,392696],[95,0,504556],[71,66,4063451],[39,43,1636311],[16,34,9713267],[90,33,8756801],[27,34,3524518],[75,12,9186905],[95,10,1934012],[83,5,1385642],[5,68,9033583],[91,43,5189310],[75,27,7687794],[81,98,7901430],[5,14,1436498],[66,17,7155005],[35,43,6783048],[49,68,3179616],[45,13,7149009],[51,24,2898389],[45,79,4612681],[19,64,1631448],[75,78,9359127],[69,12,8842413],[88,31,9440395],[80,36,4788089],[10,74,5296635],[15,7,1895822],[99,21,7769242],[51,6,9745452],[32,84,6849659],[51,62,6223096],[40,87,8265406],[52,98,3625416],[20,35,4524443],[97,5,604484],[59,39,6982503],[90,92,1259491],[47,20,3337679],[22,62,8385864],[53,27,3614371],[38,75,7339335],[93,44,7815806],[29,34,7283452],[95,64,3821573],[90,47,5829688],[5,82,9303769],[50,66,9229102],[9,95,5966143],[98,32,9052142],[50,26,1155716],[61,2,6003203],[89,24,8163455],[0,40,8092140],[9,8,1459455],[58,48,7529132],[88,21,5344262],[37,88,3301827],[57,55,2027258],[83,27,5388482],[60,54,626893],[21,42,8070343],[15,13,7775555],[3,37,1045513],[5,49,8744768],[75,59,654077],[42,36,9257515],[14,22,2605763],[96,26,9022221],[31,81,2348037],[13,34,3681950],[94,70,2658039],[76,86,2258195],[21,59,5586775],[42,65,904138],[5,36,568430],[34,0,3020879],[77,88,8087687],[65,60,9823066],[99,4,965255],[89,9,8175941],[90,75,1606445],[2,75,106297],[3,22,2340688],[42,12,750635],[5,32,6770119],[5,9,8302492],[50,14,9128445],[97,25,5960609],[48,46,7805339],[66,92,9960156],[66,51,8262485],[77,83,5096124],[11,63,9437885],[19,85,332094],[50,49,7298403],[63,7,2841382],[31,73,7513904],[45,57,4728239],[10,82,4277358],[15,27,4139709],[27,78,8549159],[66,45,1957250],[97,87,9387754],[0,48,598262],[93,10,4724380],[30,5,8047952],[98,36,4054384],[39,21,8812245],[16,71,6285989],[82,24,7516841],[74,98,613693],[90,0,9756566],[46,15,2747422],[46,8,3304515],[91,81,1930623],[83,49,599618],[48,17,3379847],[53,73,1544570],[44,30,86323],[90,44,2327667],[85,63,6216603],[5,67,7600502],[16,31,9501466],[15,61,4804990],[77,57,8887756],[75,50,4184037],[47,60,668885],[57,3,3518883],[58,27,6443762],[45,60,7033647],[9,22,5777049],[42,49,9069673],[33,3,3272326],[31,10,8369394],[47,82,7978590],[66,48,7214959],[14,38,347909],[57,71,2928605],[64,26,1344779],[66,79,7509262],[50,97,9002003],[35,6,3999750],[91,78,4628429],[24,67,2927105],[85,21,795803],[91,94,1301485],[75,63,505367],[22,1,8008275],[46,45,6775738],[15,86,1422604],[79,55,8243107],[4,14,3985968],[55,25,6945929],[87,10,7144162],[77,63,4028620],[14,63,2031777],[92,67,2009527],[16,11,49822],[99,80,8067643],[16,75,2979417],[95,34,7844825],[72,53,5127078],[43,25,5518646],[19,79,3290632],[24,99,3873591],[34,14,2254770],[18,32,3132149],[59,20,8309055],[26,60,3264892],[82,92,8370875],[36,53,4799330],[21,15,2669605],[61,1,9114462],[47,92,8787968],[93,26,7258011],[12,39,3116395],[1,34,1268218],[45,86,2489865],[32,86,8781987],[41,81,4763042],[19,28,3486430],[28,84,6501488],[44,4,2866246],[41,38,2026320],[58,47,5772426],[32,41,3905106],[19,52,2003427],[37,92,4494030],[51,73,5458621],[81,57,6295884],[51,94,7356902],[85,49,2705408],[40,3,6350892],[65,73,5164979],[75,97,5543627],[61,25,1971619],[6,40,5523390],[33,88,5672011],[96,48,2240441],[40,31,2556957],[69,18,8897058],[45,37,3068389],[13,41,409760],[40,50,7472849],[17,62,3110939],[27,29,6794014],[35,87,7410143],[92,75,8085458],[62,64,6963716],[14,21,4591183],[1,45,493508],[89,68,3892130],[25,16,1328915],[96,4,7693615],[83,24,4224321],[31,19,1725151],[42,77,7051997],[41,47,1953976],[12,14,3895714],[25,84,1899980],[96,9,6293359],[91,37,7863510],[7,89,8485273],[87,3,5985213],[18,87,4944142],[89,26,5230873],[4,33,8430579],[86,81,482347],[16,87,4281810],[37,81,3167337],[99,9,4501624],[57,20,3218182],[57,41,8409919],[14,37,7269927],[12,97,8963589],[63,8,3443824],[70,99,1775515],[32,22,7822667],[8,55,9156284],[65,74,2686054],[84,43,6655945],[80,62,4016287],[0,11,8629342],[52,97,5315667],[88,36,5716237],[39,46,2126191],[50,2,5104043],[61,46,8778559],[72,31,4727256],[28,92,4506373],[23,15,3553193],[29,63,86885],[55,33,5277507],[57,6,9743989],[30,90,4499973],[53,28,6389348],[64,76,2919523],[56,18,6921412],[31,66,3628008],[68,65,1223490],[21,82,9638649],[41,39,6507056";
//        final String[] split = s.split("],\\[");
//        List<int[]> tmpList = new ArrayList<>();
//        for (String item : split) {
//            final String[] tmp = item.split(",");
//            int[] tmpArr = {Integer.parseInt(tmp[0]), Integer.parseInt(tmp[1]), Integer.parseInt(tmp[2])};
//            tmpList.add(tmpArr);
//        }
//        result.add(new Case4(100, 0, 2, 694376777, tmpList.toArray(new int[0][])));

        return result;
    }

    private static class Case4{
        int n;
        int source;
        int des;
        int target;
        int[][] edges;

        public Case4(int n, int source, int des, int target, int[][] edges) {
            this.n = n;
            this.source = source;
            this.des = des;
            this.target = target;
            this.edges = edges;
        }
    }
}
