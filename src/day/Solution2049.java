package day;

/**
 * 2022/3/11
 * 给你一棵根节点为 0 的 二叉树 ，它总共有 n 个节点，节点编号为 0 到 n - 1 。同时给你一个下标从 0 开始的整数数组 parents 表示这棵树，其中 parents[i] 是节点 i 的父节点。由于节点 0 是根，所以 parents[0] == -1 。
 *
 * 一个子树的 大小 为这个子树内节点的数目。每个节点都有一个与之关联的 分数 。求出某个节点分数的方法是，将这个节点和与它相连的边全部 删除 ，剩余部分是若干个 非空 子树，这个节点的 分数 为所有这些子树 大小的乘积 。
 *
 * 请你返回有 最高得分 节点的 数目 。
 *
 * 示例 1:
 * 输入：parents = [-1,2,0,2,0]
 * 输出：3
 * 解释：
 * - 节点 0 的分数为：3 * 1 = 3
 * - 节点 1 的分数为：4 = 4
 * - 节点 2 的分数为：1 * 1 * 2 = 2
 * - 节点 3 的分数为：4 = 4
 * - 节点 4 的分数为：4 = 4
 * 最高得分为 4 ，有三个节点得分为 4 （分别是节点 1，3 和 4 ）。
 *
 * 示例 2：
 * 输入：parents = [-1,2,0]
 * 输出：2
 * 解释：
 * - 节点 0 的分数为：2 = 2
 * - 节点 1 的分数为：2 = 2
 * - 节点 2 的分数为：1 * 1 = 1
 * 最高分数为 2 ，有两个节点分数为 2 （分别为节点 0 和 1 ）。
 *  
 *
 * 提示：
 * n == parents.length
 * 2 <= n <= 10^5
 * parents[0] == -1
 * 对于 i != 0 ，有 0 <= parents[i] <= n - 1
 * parents 表示一棵二叉树。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/count-nodes-with-the-highest-score
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @author x.c
 */
public class Solution2049 {
    /**
     * TODO 试试看吧
     *      分数的计算方式就是删除一个节点，计算其余非空子树的节点数的乘积
     *      以此来看，去除一个节点后，最大非空子树的数量为 3，即最高为三个数的乘积
     *      即，要想获取最大值，此处有两种拆分方式
     *      1、当总节点数量小于等于 5 时，最大乘积为 n-1，即总是拆掉无子树或仅有一个子树的根节点
     *      2、当总节点数量大于 5 时，则优先拆分为两个子树，其次再拆为三个子树（因为需要考虑到单子树的可能
     *      最后统计能得到最大分数的拆除方式
     *      思路有了，但不会做，考虑到节点数量最大为 100000 暴力遍历不太可取
     *      看了标签，深度优先遍历，有点麻
     */
    public int countHighestScoreNodes(int[] parents) {
        return 0;
    }
}
