package easy;

import utils.Common;

import java.util.Arrays;

/**
 * 2023/6/5
 * 2460. 对数组执行操作
 * 给你一个下标从 0 开始的数组 nums ，数组大小为 n ，且由 非负 整数组成。
 *
 * 你需要对数组执行 n - 1 步操作，其中第 i 步操作（从 0 开始计数）要求对 nums 中第 i 个元素执行下述指令：
 *
 * 如果 nums[i] == nums[i + 1] ，则 nums[i] 的值变成原来的 2 倍，nums[i + 1] 的值变成 0 。否则，跳过这步操作。
 * 在执行完 全部 操作后，将所有 0 移动 到数组的 末尾 。
 *
 * 例如，数组 [1,0,2,0,0,1] 将所有 0 移动到末尾后变为 [1,2,1,0,0,0] 。
 * 返回结果数组。
 *
 * 注意 操作应当 依次有序 执行，而不是一次性全部执行。
 *
 * @author x.z
 */
public class Solution2460 {
    /**
     * TODO 暴力试下
     *      会错意了，以为是要反复操作至没有重复的为止，结果只需要过一遍就完事了
     */
    public int[] applyOperations(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            int next = i + 1;
            if(nums[i] == nums[next]){
                nums[i] *= 2;
                nums[next] = 0;
            }
        }

        int begin = 0;
        int end = begin + 1;
        while(begin < end && end < nums.length){
            while(begin < nums.length && nums[begin] != 0){
                begin ++;
            }
            end = Math.max(end, begin + 1);
            while(end < nums.length && nums[end] == 0){
                end ++;
            }
            if(begin < nums.length && end < nums.length){
                if(begin < end){
                    nums[begin] = nums[end];
                    nums[end] = 0;
                }
            }
        }
        return nums;
    }

    public static void main(String[] args) {
        final Solution2460 demo = new Solution2460();

        System.out.println(Arrays.toString(demo.applyOperations(Common.string2IntArr("[38,713,0,0,0,0,562,0,0,974,974,974,974,255,255,64,557,557,854,854,0,0,948,948,0,740,502,502,80,15,0,193,476,639,993,993,0,59,106,106,92,0,0,865,865,616,616,616,616,616,881,492,492,592,0,0,472,472,47,47,47,114,66,346,346,346,346,0,538,538,988,0,0,930,264,425,425,425,310,409,582,582,582,582,802,0,235,355,929,0,30,545,860,0,0,578,454,792,728,631,631,631,0,0,710,367,367,758,33,498,125,125,731,731,904,0,0,0,980,3,3,3,481,481,0,767,543,217,0,0,0,0,242,242,148,219,811,811,0,564,564,0,0,0,468,0,0,0,571,905,905,582,0,0,774,17,65,132,132,0,0,339,0,0,239,239,239,197,218,482,0,0,0,222,844,844,0,538,932,534,376,0,0,778,615,615,615,0,0,0,0,0,331,331,331,0,0,880,0,0,650,650,918,928,473,187,0,890,890,0,0,0,0,397,397,451,564,342,0,412,412,412,262,50,247,23,760,0,493,0,0,0,713,482,388,207,827,366,862,862,554,0,0,510,33,33,598,0,405,945,362,795,795,0,0,0,811,811,641,641,0,0,0,300,947,947,947,0,76,76,0,689,44,44,0,2,2,2,2,68,68,166,259,706,706,0,0,0,0,0,0,0,0,890,0,0,583,583,583,0,854,854,0,0,0,797,797,89,456,0,0,0,0,694,661,0,601,0,658,731,731,286,0,240,240,903,903,0,280,861,861,861,566,566,566,525,525,740,740,740,740,740,0,0,347,347,347,95,95,972,0,71,0,0,0,0,494,0,699,699,699,447,993,816,816,816,0,0,0,0,0,0,213,589,589,589,589,589,484,484,484,593,62,0,62,0,0,76,372,709,393,423,0,564,0,0,0,0,873,0,847,847,847,847,225,530,0,0,0,439,0,910,693,0,0,452,452,877,877,877,186,186,264,944,139,139,139,439,819,0,0,0,165,165,960,874,576,576,576,916,708,708,708,88,88,88,205,205,0,329,329,329,0,0,941,941,941,941,80,0,0,0,0,0,0,954,954,0,217,526,125,125,563,279,279,279,279,279,826,398,929,877,352,191,298,298,500,500,991,991,917,704,860,860,860,860,860,54,54,54,54,904,756,0,48,373,0,112,425,0,0,0,419,162,362,362,272,272,272,272,272,564,502,0,886,439,439,0,0,655,249,249,249,249,0,0,0,0,127,12,12,478,0,0,0,0,378,344,467,467,467,467,358,0,0,143,143,143,143,143,980,403,70,820,900,0,948,407,924,924,334,354,354,0,0,0,0,959,959,959,959,0,422,0,0,66,66,66,66,66,715,715,108,0,0,693,396,396,143,0,108,108,0,0,0,0,0,0,714,714,714,317,317,808,0,0,690,421,0,940,940,239,363,0,0,0,847,537,537,537,657,392,392,334,334,950,0,0,107,926,538,538,589,529,529,142,142,0,0,453,0,0,0,719,651,0,0,0,0,757,399,576,576,576,737,339,563,0,0,265,618,805,244,401,401,214,214,159,0,0,0,0,0,0,0,858,438,0,0,0,891,607,607,0,666,666,666,666,1,0,461,353,353,0,0,979,979,174,174,686,686,686,686,686,456,473,0,369,493,608,915,915,847,929,699,699,0,833,686,713,0,582,260,260,251]"))));
    }
}
